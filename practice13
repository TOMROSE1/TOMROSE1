package day002;

import java.util.Scanner;

public class demo014 {

	public static void main(String[] args) {
	Scanner console = new Scanner(System.in);
	String str;
	char c;
	while (true) {
		System.out.println("请输入一个数");
		str = console.nextLine();
		c = str.charAt(0);
		if (c>='0'&&c<='9') {
			break;
			
		}
	System.out.println("输入错误！");
	}
	System.out.println(str);
	int n = Integer.parseInt(str);
	System.out.println(n);
		
	}

}

package day002;
/*
 * 数组
 * 
 */
public class demo015 {

	public static void main(String[] args) {
		int []  ary;//声明数组变量ary
		ary = new int[3];
		//new int【3】创建数组对象，简称创建数组
		//ary = 数组对象，表示ary的值引用了一个数组对象new int【10】
		int[] ary2 = ary;
		//是引用的赋值，复制结果ary2和ary
		//引用了同一个数组对象
		ary[0] = 0;
		System.out.println(ary2[0]);
		
		/*\
		 * Int【】ary3 = new int【3】；//元素自动化为0
		 
				System.out.println(ary3[0]);//0
				System.out.println(ary3[1]);//0
				System.out.println(ary3[2]);//0
				Double【】ary4 = new double【3】；
				System.out.println(ary4[0]);//0.0
				Boolean【】ary5 = new Boolean 【3】；
				System.out.println(ary5[0]);//flase
				Char 【】 ary6 = new char【3】；
				System.out.println((int)ary6[0]);
				// System.out.println（ary6[0]);//控制字符\u0000 显示无效果
		*/

	}

}

package day002;

public class demo016 {

	public static void main(String[] args) {
		int[] ary1=new int[] {3,4,5};
		System.out.println(ary1.length);
		System.out.println(ary1[0]);
		System.out.println(ary1[1]);
		System.out.println(ary1[2]);
		//System.out.println(ary1[3]);
		System.out.println(ary1[ary1.length-1]);
		ary1[0] = 8;
		ary1[1]++;
		System.out.println(ary1[0]);
		System.out.println(ary1[1]);
		
		
	}

}

package day002;

public class demo017 {

	public static void main(String[] args) {
	int[]ary = {1,1,2,3,5,8,13,21,34,55};
	int sum = 0;
	for (int i = 0; i<ary.length;i++) {
		int n = ary[i];
		System.out.println(i+":"+n);
		sum+=n;
	}
	System.out.println(sum);
	}

}

循环控制
For 最常用，甚至只用这一个可以解决任何循环问题
 For最常用在与次数有关的循环处理
While
很常用，用在循环开始时候要先检查循环条件再处理循环体
用在与次数无关的情况。
如果不能明确结束条件的时候，先使用 while（true），再适当条件使用break结束循环。
While （true）{
//。。
//。。
If（是否结束）{
Break
}
}

Do while 在循环最后判断是否结束的循环
如：使用 while （true）实现循环的时候，结束条件 break在while 循环体的最后，就可以使用do while。
Do while 的结束条件经常是“否定逻辑条件”，不便于思考业务逻辑。使用时候要注意，可以利用while（true）+break 替换

循环的替换
While（布尔表达式）{ } 等价 for（；布尔表达式；）{}
While（true）{} 等价 for（；；）
While（true）{}+ break 替换 do {}while（布尔表达式）；
For（；；）+break 替换 do{}while（布尔表达式）；

学习循环：多练习，多使用，温故知新。多做。

数组（array）
·	相同数据类型的元素组成的集合。
·	这些元素按线性顺序排列。所谓线性顺序是指除第一个元素外，每一个元素都有唯一的前驱元素；出最后一个元素外每一个元素都有唯一的后续元素（“一个跟一个”）。
·   可以通过下标的方式访问数组中的每一个元素。
数组的创建
·数组类型变量按照如下等号左边的方式声明。
·等号右边创建数组对象。

Int【】ary =
Int【】ary；//声明数组变量ary
Ary = new int【3】；//new int【3】创建数组对象，简称创建数组
//ary = 数组对象，表示ary的值引用了一个数组对象new int【10】
Int【】ary2= ary；//是引用的赋值，复制结果ary2和ary
//引用了同一个数组对象

//数组元素的自动初始化：创建数组时候数组元素是自动初始化的
//初始化为0值 0 0.0 false \ u0000 编码为0的字符，是控制字符
Int【】ary3 = new int【3】；//元素自动化为0
System.out.println(ary3[0]);//0
System.out.println(ary3[1]);//0
System.out.println(ary3[2]);//0
Double【】ary4 = new double【3】；
System.out.println(ary4[0]);//0.0
Boolean【】ary5 = new Boolean 【3】；
System.out.println(ary5[0]);//flase
Char 【】 ary6 = new char【3】；
System.out.println((int)ary6[0]);
// System.out.println（ary6[0]);//控制字符\u0000 显示无效果


// 创建数组时候直接初始化元素
Int【】 ary7 = new int【】{2，3，4}
System.out.println(ary7[0]);//2
//数组静态初始化 简化版初始化数组元素，
//只能用在声明变量时候直接赋值
Int【】ary 8 = {2，3，4}；
System.out.println（ary7【0】）；//2
//Ary8 = {4，5，6}；//编译错误
Ary8 = new int【】{4，5，6}；
//{0，0，0}与new int【】{0，0，0} 和new int【3】
//如上3种数组是，没有任何差别的！
// 根据实际业务需要，哪种方便用哪个
// 如： 创建10000个元素的数组用 new int【10000】
// 如果已经知道有具体元素了用{3，4，5} 或 new int【】{4，5，6}
数组的长度属性length
数组的下标范围0，1，2最后一个元素的位置length-1
超过数组下标范围访问会出现异常。
System.out.println(ary1.[0]);//3
System.out.println(ary1.[1]);//4
System.out.println(ary1.[2]);//5
System.out.println(ary1.[ary1.length-1]);//5
System.out.println(ary1.[3]);//运行异常，下标越界
// 运行结果是：A编译错误 B运行异常 C3 D 0
/*
数组的迭代
迭代：遍历，就是将数组元素逐一处理一遍的方法
*/
Int 【】ary = {1，1，2，3，5，8，13，21，34，55}；
//            0  1  2  3  4  5  6  7  8   9  length 10
// I = 0~《length
